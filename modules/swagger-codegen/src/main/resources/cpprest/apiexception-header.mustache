{{>licenseInfo}}
/*
 * ApiException.h
 *
 * This is the exception being thrown in case the api call was not successful
 */

#ifndef ApiException_H_
#define ApiException_H_

{{{defaultInclude}}}

#include <memory>
#include <map>

#include <cpprest/details/basic_types.h>
#include <cpprest/http_msg.h>


{{#invokerNamespaceDeclarations}}
namespace {{this}} {
{{/invokerNamespaceDeclarations}}

class {{declspec}} ApiException
    : public web::http::http_exception
{
public:
    ApiException( int errorCode
        , const utility::string_t& message
        , std::shared_ptr<std::istream> content = nullptr );
    ApiException( int errorCode
        , const utility::string_t& message
        ,  web::http::http_headers& headers
        , std::shared_ptr<std::istream> content = nullptr );
    virtual ~ApiException();

    web::http::http_headers& getHeaders();
    std::shared_ptr<std::istream> getContent() const;
    const char* getRequestId() const;

protected:
    std::shared_ptr<std::istream> m_Content;
    web::http::http_headers m_Headers;
    std::string m_requestId;
};

{{#invokerNamespaceDeclarations}}
}
{{/invokerNamespaceDeclarations}}

#endif /* ApiBase_H_ */

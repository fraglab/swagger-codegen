{{>licenseInfo}}
#include "ApiException.h"

{{#invokerNamespaceDeclarations}}
namespace {{this}} {
{{/invokerNamespaceDeclarations}}

ApiException::ApiException( int errorCode
    , const utility::string_t& message
    , std::shared_ptr<std::istream> content /*= nullptr*/ )
    : web::http::http_exception( errorCode, message )
    , m_Content(content)
{
}

ApiException::ApiException( int errorCode
    , const utility::string_t& message
    , web::http::http_headers& headers
    , std::shared_ptr<std::istream> content /*= nullptr*/ )
    : web::http::http_exception( errorCode, message )
    , m_Content(content)
    , m_Headers(headers)
{
    const auto it = m_Headers.find(U("x-request-id"));
    m_requestId = it != m_Headers.end() ? utility::conversions::to_utf8string(it->second) : std::string();
}

ApiException::~ApiException()
{
}

std::shared_ptr<std::istream> ApiException::getContent() const
{
    return m_Content;
}

web::http::http_headers& ApiException::getHeaders()
{
    return m_Headers;
}

const char* ApiException::getRequestId() const
{
    return m_requestId.c_str();
}

{{#invokerNamespaceDeclarations}}
}
{{/invokerNamespaceDeclarations}}

{{>licenseInfo}}
/*
 * ApiClient.h
 *
 * This is an API client responsible for stating the HTTP calls
 */

#ifndef ApiClient_H_
#define ApiClient_H_

{{{defaultInclude}}}
#include "ApiConfiguration.h"
#include "ApiException.h"
#include "IHttpBody.h"
#include "HttpContent.h"

#include <assert.h>

#include <memory>
#include <vector>
#include <mutex>

#include <cpprest/details/basic_types.h>
#include <cpprest/http_client.h>

{{#invokerNamespaceDeclarations}}
namespace {{this}} {
{{/invokerNamespaceDeclarations}}

class QosEnabledApi : public std::enable_shared_from_this<QosEnabledApi>
{
public:
    void IncRequestsCount(std::string requestName);
    void DecRequestsCount(std::string requestName);
    std::map<std::string, int> GetQosLimits();

    bool TryGetQosLimit(std::string requestName, int& limit);
    bool TryUpdateQosLimit(std::string requestName, int limit);

protected:
    using std::enable_shared_from_this<QosEnabledApi>::shared_from_this;

    bool IsQosLimitReached(std::string requestName);
    bool IsQosDisabled(std::string requestName);
    void SetQosLimit(std::string requestName, int limit);

private:
    std::map<std::string, int> m_qosLimits;
    std::map<std::string, int> m_requests;
    std::mutex m_requests_lock;
};

class QosTracker
{
public:
    QosTracker(std::string requestName, std::shared_ptr<QosEnabledApi> pApi)
    {
        assert(m_requestName.empty());

        m_requestName = requestName;
        m_api = pApi;
    
        m_api->IncRequestsCount(requestName);
    }

    ~QosTracker()
    {
        m_api->DecRequestsCount(m_requestName);
    }
    
private:
    std::string m_requestName;
    std::shared_ptr<QosEnabledApi> m_api;
};

class {{declspec}} ApiClient
{
public:
    ApiClient( std::shared_ptr<ApiConfiguration> configuration = nullptr );
    virtual ~ApiClient();

    std::shared_ptr<ApiConfiguration> getConfiguration() const;
    void setConfiguration(std::shared_ptr<ApiConfiguration> configuration);

    static utility::string_t parameterToString(utility::string_t value);
    static utility::string_t parameterToString(int32_t value);
    static utility::string_t parameterToString(int64_t value);
    static utility::string_t parameterToString(const utility::datetime &value);

    template<class T>
    static utility::string_t parameterToArrayString(std::vector<T> value)
    {
        utility::stringstream_t ss;

        for( size_t i = 0; i < value.size(); i++)
        {
            if( i > 0) ss << URI(", ");
            ss << ApiClient::parameterToString(value[i]);
        }

        return ss.str();
    }

    pplx::task<web::http::http_response> callApi(
        const utility::string_t& path,
        const utility::string_t& method,
        const std::map<utility::string_t, utility::string_t>& queryParams,
        const std::shared_ptr<IHttpBody> postBody,
        const std::map<utility::string_t, utility::string_t>& headerParams,
        const std::map<utility::string_t, utility::string_t>& formParams,
        const std::map<utility::string_t, std::shared_ptr<HttpContent>>& fileParams,
        const utility::string_t& contentType,
        const pplx::cancellation_token& token
    ) const;

public:
    static const int QosDisabled = -1;

protected:

    std::shared_ptr<ApiConfiguration> m_Configuration;
};

{{#invokerNamespaceDeclarations}}
}
{{/invokerNamespaceDeclarations}}

#endif /* ApiClient_H_ */

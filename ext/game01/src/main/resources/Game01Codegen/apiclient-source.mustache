{{>licenseInfo}}
#include "ApiClient.h"
#include "MultipartFormData.h"
#include "ModelBase.h"

{{#invokerNamespaceDeclarations}}
namespace {{this}} {
{{/invokerNamespaceDeclarations}}

void QosEnabledApi::IncRequestsCount(std::string requestName)
{
    std::lock_guard<std::mutex> lock(m_requests_lock);
    ++(m_requests[requestName]);
}

void QosEnabledApi::DecRequestsCount(std::string requestName)
{
    std::lock_guard<std::mutex> lock(m_requests_lock);
    --(m_requests.at(requestName));
}

bool QosEnabledApi::IsQosLimitReached(std::string requestName)
{
    std::lock_guard<std::mutex> lock(m_requests_lock);
    auto requestsCount = m_requests.find(requestName);
    return requestsCount != m_requests.end() && requestsCount->second >= m_qosLimits.at(requestName);
}

bool QosEnabledApi::IsQosDisabled(std::string requestName)
{
    std::lock_guard<std::mutex> lock(m_requests_lock);
    return m_qosLimits.at(requestName) == ApiClient::QosDisabled;
}

void QosEnabledApi::SetQosLimit(std::string requestName, int limit)
{
    std::lock_guard<std::mutex> lock(m_requests_lock);
    m_qosLimits[requestName] = limit;
}

bool QosEnabledApi::TryGetQosLimit(std::string requestName, int& limit)
{
    std::lock_guard<std::mutex> lock(m_requests_lock);
    auto qosLimit = m_qosLimits.find(requestName);
    
    if (qosLimit != m_qosLimits.end())
    {
        limit = qosLimit->second;
        return true;
    }

    return false;
}

bool QosEnabledApi::TryUpdateQosLimit(std::string requestName, int limit)
{
    std::lock_guard<std::mutex> lock(m_requests_lock);
    auto qosLimit = m_qosLimits.find(requestName);

    if (qosLimit != m_qosLimits.end())
    {
        qosLimit->second = limit;
        return true;
    }

    return false;
}

std::map<std::string, int> QosEnabledApi::GetQosLimits()
{
    std::lock_guard<std::mutex> lock(m_requests_lock);
    std::map<std::string, int> qosLimits(m_qosLimits);

    return qosLimits;
}

ApiClient::ApiClient(std::shared_ptr<ApiConfiguration> configuration )
    : m_Configuration(configuration)
{
}
ApiClient::~ApiClient()
{
}

std::shared_ptr<ApiConfiguration> ApiClient::getConfiguration() const
{
    return m_Configuration;
}
void ApiClient::setConfiguration(std::shared_ptr<ApiConfiguration> configuration)
{
    m_Configuration = configuration;
}

utility::string_t ApiClient::parameterToString(utility::string_t value)
{
    return value;
}
utility::string_t ApiClient::parameterToString(int64_t value)
{
    return utility::conversions::to_string_t(std::to_string(value));
}
utility::string_t ApiClient::parameterToString(int32_t value)
{
    return utility::conversions::to_string_t(std::to_string(value));
}

utility::string_t ApiClient::parameterToString(const utility::datetime &value)
{
    return utility::conversions::to_string_t(value.to_string(utility::datetime::ISO_8601));
}

pplx::task<web::http::http_response> ApiClient::callApi(
    const utility::string_t& path,
    const utility::string_t& method,
    const std::map<utility::string_t, utility::string_t>& queryParams,
    const std::shared_ptr<IHttpBody> postBody,
    const std::map<utility::string_t, utility::string_t>& headerParams,
    const std::map<utility::string_t, utility::string_t>& formParams,
    const std::map<utility::string_t, std::shared_ptr<HttpContent>>& fileParams,
    const utility::string_t& contentType,
    const pplx::cancellation_token& token
) const
{
    if (postBody != nullptr && formParams.size() != 0)
    {
        throw ApiException(400, _XPLATSTR("Cannot have body and form params"));
    }

    if (postBody != nullptr && fileParams.size() != 0)
    {
        throw ApiException(400, _XPLATSTR("Cannot have body and file params"));
    }

    if (fileParams.size() > 0 && contentType != _XPLATSTR("multipart/form-data"))
    {
        throw ApiException(400, _XPLATSTR("Operations with file parameters must be called with multipart/form-data"));
    }

    web::http::client::http_client client(m_Configuration->getBaseUrl(), m_Configuration->getHttpConfig());

    web::http::http_request request;
    for ( auto& kvp : headerParams )
    {
        request.headers().add(kvp.first, kvp.second);
    }

    const auto& userInfo = utility::conversions::to_utf8string(client.base_uri().user_info());
    if (!userInfo.empty())
    {
        std::vector<unsigned char> basicAuthBuf;
        std::copy(userInfo.begin(), userInfo.end(), std::back_inserter(basicAuthBuf));
        basicAuthBuf.push_back('\0');

        request.headers().add(web::http::header_names::authorization,
                              _XPLATSTR("Basic ") + utility::conversions::to_base64(basicAuthBuf));
    }

    if (fileParams.size() > 0)
    {
        MultipartFormData uploadData;
        for (auto& kvp : formParams)
        {
            uploadData.add(ModelBase::toHttpContent(kvp.first, kvp.second));
        }
        for (auto& kvp : fileParams)
        {
            uploadData.add(ModelBase::toHttpContent(kvp.first, kvp.second));
        }
        std::stringstream data;
        postBody->writeTo(data);
        auto bodyString = data.str();
        auto length = bodyString.size();
        request.set_body(concurrency::streams::bytestream::open_istream(std::move(bodyString)), length, contentType);
    }
    else
    {
        if (postBody != nullptr)
        {
            std::stringstream data;
            postBody->writeTo(data);
            auto bodyString = data.str();
            auto length = bodyString.size();
            request.set_body(concurrency::streams::bytestream::open_istream(std::move(bodyString)), length, contentType);
        }
        else
        {
            web::http::uri_builder formData;
            for (auto& kvp : formParams)
            {
                formData.append_query(kvp.first, kvp.second);
            }
            request.set_body(formData.query(), _XPLATSTR("application/x-www-form-urlencoded"));
        }
    }

    web::http::uri_builder builder(path);
    for (auto& kvp : queryParams)
    {
        builder.append_query(kvp.first, kvp.second);
    }
    request.set_request_uri(builder.to_uri());
    request.set_method(method);
    if ( !request.headers().has( web::http::header_names::user_agent ) )
    {
        request.headers().add( web::http::header_names::user_agent, m_Configuration->getUserAgent() );
    }

    return client.request(request, token);
}

{{#invokerNamespaceDeclarations}}
}
{{/invokerNamespaceDeclarations}}
